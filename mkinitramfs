#!/bin/sh
#
# a simple initramfs generator inspired by Arch's mkinitcpio
# but wrote it simpler
#

PATH=/bin:/usr/bin:/sbin:/usr/sbin

add_binary() {
	binpath=$(command -v $1)
	if [ -z "$binpath" ]; then
		msgwarn "missing binary: $1"
		return
	fi
	add_file $binpath
	if [ -L $binpath ]; then
		add_binary $(readlink -f $binpath)
		return
	fi
	case "$(file -bi $binpath)" in
		*application/x-sharedlib* | *application/x-executable* | *application/x-pie-executable*)
			binlib=$(ldd $binpath | grep -v "not" | sed "s/\t//" | cut -d " " -f3 | sed '/^$/d')
			for lib in $binlib; do
				add_file $lib
				unset lib
			done;;
	esac
	unset binpath binlib
}

add_module() {
	if modinfo -k $KERNEL $1 >/dev/null 2>&1; then
		modname=$(modinfo -k $KERNEL -F name $1 | cut -d ' ' -f1 | head -n1)
		[ "$modname" = "name:" ] && return 0
		modpath=$(modinfo -k $KERNEL -F filename $1 | cut -d ' ' -f1 | head -n1)
		[ "$modpath" = "name:" ] && return 0
	else
		msg "missing module: $1"
		return
	fi
	if [ -f $INITDIR/lib/modules/$KERNEL/kernel/${modpath##*/} ]; then
		return
	fi
	add_file "$modpath" lib/modules/$KERNEL/kernel/${modpath##*/}
	modinfo -F firmware -k $KERNEL $modname | while read -r line; do
		if [ ! -f /lib/firmware/$line ]; then
			msgwarn "missing firmware for $modname: $line"
		else
			add_file /lib/firmware/$line
		fi
	done
	for i in $(modinfo -F depends -k $KERNEL $modname | tr ',' ' '); do
		add_module $i
	done
	unset modname modpath
}

add_file() {
	[ "$1" ] || return
	
	src=$1
	
	if [ "$(echo $src | head -c1)" != "/" ]; then
		msgwarn "absolute source path needed: $src"
		return
	fi
	
	if [ ! -f "$src" ]; then
		msgwarn "file not found: $src"
		return
	fi
	
	if [ "$(echo $dest | head -c1)" = "/" ]; then
		msgwarn "destination path must without leading '/': $dest"
		return
	fi
	
	if [ -z "$2" ]; then
		dest=$(echo $src | sed 's,^/,,')
	else
		dest="$2"
	fi
	
	mode=${3:-$(stat -c %a "$src")}
	if [ -z "$mode" ]; then
		msgwarn "failed get file mode: $src"
		return
	fi
	
	install -Dm$mode $src $INITDIR/$dest
	
	unset src dest mode
}

add_dir() {
	path=$1
	mode=${2:-755}
	
	if [ -z "$path" ]; then
		return 1
	fi
	
	case $path in
		/*) ;;
		 *) return 1;;
	esac
	
	if [ -d "$INITDIR$path" ]; then
		return 0
	fi
	
	install -dm$mode $INITDIR$path
	
	unset path
}

add_symlink() {
	name=$1
	target=$2
	
	[ "$name" ] || return 1
	
	if [ ! "$target" ]; then
		target=$(readlink -f $name)
		if [ ! "$target" ]; then
			msgerr "invalid symlink: $name"
			return 1
		fi
	fi
	
	add_dir "${name%/*}"
	
	if [ -L "$INITDIR$name" ]; then
		msgwarn "overwriting symlink: $name"
	fi
	
	ln -sfn "$target" $INITDIR$name
}

finalize_modules() {
	[ -d $INITDIR/lib/modules/$KERNEL/kernel ] || return
	for file in /lib/modules/$KERNEL/modules.*; do
		add_file $file
	done
	awk -F'/' '{ print "kernel/" $NF }' /lib/modules/$KERNEL/modules.order > $INITDIR/lib/modules/$KERNEL/modules.order
	depmod -b $INITDIR $KERNEL
}

get_hook_path() {
	case $1 in
		*/*) [ -f $1 ] && echo $1;;
		*) for i in $(echo $HOOKDIRS | tr ':' ' '); do
			   [ -f $i/$1 ] && echo $i/$1; break
		   done;;
	esac
}

run_build_hook() {
	if [ "$HOOKS" ]; then
		for hook in $HOOKS; do
			[ "$(echo $DONEHOOK | tr ' ' '\n' | grep -x $hook)" = "$hook" ] && continue
			hookpath=$(get_hook_path $hook.hook)
			echo $1
			if [ "$hookpath" ]; then
				. "$hookpath"
				if [ "$(command -v build_hook)" ]; then
					msg "running build_hook: $hook"
					build_hook
				fi
				echo $hook >> $INITDIR/hook/hook.order
				add_file "$hookpath" hook/$hook 755
				DONEHOOK="$DONEHOOK $hook"
				unset hookpath build_hook hook
			else
				msgwarn "missing hook: $hook"
			fi
		done
	fi
}

msg() {
	[ $QUIET ] && return
	echo ":: $*"
}

msgerr() {
	[ $QUIET ] && return
	echo "ERROR: $*"
}

msgwarn() {
	[ $QUIET ] && return
	echo "WARNING: $*"
}

cleanup() {
	rm -fr $INITDIR
}

interrupted() {
	cleanup
	exit 1
}

usage() {	
	cat << EOF
Usage:
  $(basename $0) [option] [argument]
  
Options:
  -k <version>  custom kernel version (default: $KERNEL)
  -o <output>   custom output name (default: $INITRAMFS)
  -i <init>     custom init file (default: $INITIN)
  -m <modules>  add extra modules (comma separated)
  -b <binaries  add extra binary (comma separated)
  -f <file>     add extra file (comma separated & absolute path)
  -c <config>   use custom config (default: $CONFIG)
  -A <hook>     add extra hook (comma separated, precedence over -a, -s & HOOKS)
  -a <hook>     add extra hook (comma separated, precedence over -s & after HOOKS)
  -s <hook>     skip hook defined in HOOKS (comma separated)
  -q            quiet mode
  -h            print this help msg
	
EOF
}

needarg() {
	if [ ! "$1" ]; then
		echo "ERROR: argument is needed for this option!"
		exit 1
	fi
}		

parse_opt() {
	while [ $1 ]; do
		case $1 in
			-k)	needarg $2
				KERNEL=$2
				shift 1 ;;
			-o)	needarg $2
				OUTPUT=$2
				shift 1 ;;
			-i)	needarg $2
				INITIN=$2
				shift 1 ;;
			-c)	needarg $2
				CONFIG=$2
				shift 1 ;;
			-A)	needarg $2
			    ADDEARLYHOOKS=$(echo $2 | tr ',' ' ')
				shift 1 ;;
			-a)	needarg $2
			    ADDHOOKS=$(echo $2 | tr ',' ' ')
				shift 1 ;;
			-s)	needarg $2
			    SKIPHOOKS=$(echo $2 | tr ',' ' ')
				shift 1 ;;
			-m) needarg $2
			    ADDMODULES=$(echo $2 | tr ',' ' ')
				shift 1 ;;
			-b) needarg $2
			    ADDBINARIES=$(echo $2 | tr ',' ' ')
				shift 1 ;;
			-f) needarg $2
			    ADDFILES=$(echo $2 | tr ',' ' ')
				shift 1 ;;
			-q)	QUIET=1 ;;
			-h)	usage; exit 0 ;;
			*)	echo "ERROR: invalid option '$1'"
				exit 1 ;;
		esac
		shift
	done
}

main() {
	parse_opt "$@"

	if [ "$(id -u)" != "0" ]; then
		msgerr "need root access!"
		exit 1
	fi
	
	CPIO=$(command -v bsdcpio) || CPIO=$(command -v cpio)
	if [ ! "$CPIO" ]; then
		msgerr "neither 'bsdcpio' or 'cpio' found, exiting..."
		exit 1
	fi
	
	if [ -f "$CONFIG" ]; then
		. "$CONFIG"
	else
		msgerr "config file '$CONFIG' not exist."
		exit 1
	fi
	
	if [ ! -d /lib/modules/"$KERNEL" ]; then
		msgerr "kernel directory '/lib/modules/$KERNEL' not exist."
		exit 1
	fi
	
	if [ ! -f "$INITIN" ]; then
		msgerr "init file '$INITIN' not exist."
		exit 1
	fi
	
	if [ "$OUTPUT" ]; then
		if [ $(basename $OUTPUT) != "$OUTPUT" ] && [ ! -d $(dirname $OUTPUT) ]; then
			msgerr "directory '$(dirname $OUTPUT)' for output '$(basename $OUTPUT)' not exist."
			exit 1
		elif [ -d "$OUTPUT" ]; then
			msgerr "'$OUTPUT' is a directory."
			exit 1
		fi
		INITRAMFS="$OUTPUT"
	fi
	
	# filter out skip hooks (-s)
	if [ "$SKIPHOOKS" ] && [ "$HOOKS" ]; then
		for h in $HOOKS; do
			echo $SKIPHOOKS | tr ' ' '\n' | grep -x $h >/dev/null 2>&1 || NEWHOOKS="$NEWHOOKS $h"
		done
		HOOKS=$NEWHOOKS
		unset NEWHOOKS
	fi
	
	# add extra hooks (-a)
	if [ "$ADDHOOKS" ]; then
		HOOKS="$HOOKS $ADDHOOKS"
	fi
	
	# add extra early hooks (-A)
	if [ "$ADDEARLYHOOKS" ]; then
		ADDEARLYHOOKS="$ADDEARLYHOOKS $HOOKS"
		HOOKS="$ADDEARLYHOOKS"
	fi
	
	# add extra modules (-m)
	if [ "$ADDMODULES" ]; then
		MODULES="$MODULES $ADDMODULES"
	fi
	
	# add extra files (-f)
	if [ "$ADDFILES" ]; then
		FILES="$FILES $ADDFILES"
	fi
	
	# add extra binary (-b)
	if [ "$ADDBINARIES" ]; then
		BINARIES="$BINARIES $ADDBINARIES"
	fi

	[ $QUIET ] || echo "Generating initramfs..."
	
	mkdir -p $INITDIR/hook $INITDIR/newroot
	install -m0755 $INITIN $INITDIR/init
	run_build_hook
	
	if [ "$BINARIES"  ]; then
		msg "adding extra binaries..."
		for b in $BINARIES; do
			add_binary "$b"
		done
	fi
	
	if [ "$MODULES" ]; then
		msg "adding extra modules..."
		for m in $MODULES; do
			add_module "$m"
		done
	fi
	
	if [ "$FILES" ]; then
		msg "adding extra files..."
		for f in $FILES; do
			add_file "$f"
		done
	fi
	
	finalize_modules

	msg "generating initramfs..."
	rm -f "$INITRAMFS"
	( cd $INITDIR ; find . | LANG=C $CPIO -o -H newc --quiet | gzip -9 ) > $INITRAMFS

	cleanup
	[ $QUIET ] || echo "Generating initramfs done: $INITRAMFS ($(du -h $INITRAMFS | awk '{print $1}'))"
	
	exit 0
}

trap "interrupted" 1 2 3 15

INITDIR="/tmp/mkinitramfs.$$"
KERNEL="$(uname -r)"
INITIN="/usr/share/mkinitramfs/init.in"
INITRAMFS="initrd-$KERNEL.img"
CONFIG="/etc/mkinitramfs.conf"
HOOKDIRS="/etc/mkinitramfs.d:/usr/share/mkinitramfs/hooks"

main "$@"
